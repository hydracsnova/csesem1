/*AUTHOR:DEBANJAN CHAKRABORTY
  DATE(last updated):4th April 2022
  TOPIC:LINE FOLLOWER ROBOT CODE
  IDE:ARDUINO
  BOARD:ARDUINO UNO
#GUIDELINES#
->To keep the robot at max efficiency maintain the angle of 2 ir sensors at ** degrees so even though there might appear a right angle 
the robot would sense it as a normal turn.
->This issue might seem complecated at first but is very easy to solve just by increasing the angle between the sensors.
->This method is exclusively for only 2 sensor line followers, complex cases appear as you keep increasing the number of sensors.
->I strictly prefre not to use more than 4 sensors as the power supply is mostly limited to 12V in expo and competitions so please follow these guidelines carefully.
->If your motors are not as good as mine were please dont do any alterations to the code as the sppeds are tested repeatedly till I achieved 100% accuracy.
->While personel testing make a track to minimum 3 cm width or two tapes side by side worth so the gap between them is maintained and the line follower smoothly 
follows the line.
->I request to test multiple times before presenting the product as there might be some hardware issues that you never know wen they can arise.
->Makes sure that the robot starts with the black line in the middle and white lines n the side and if you install my code in it or take reference from it you 
would not hve any issue completing the product with flying colours.*/
//defination of pins of motor
//Motor 1
#define ena 6
#define mla 7
#define mlb 8

//Motor 2
#define mra 9
#define mrb 10
#define enb 11

//Optimum speed setting
#define Speed 80

void setup() {
  //pins for sensors
  pinMode(3, INPUT);
  pinMode(4, INPUT);
  //pins for motor driver
  pinMode(mla, OUTPUT);
  pinMode(mlb, OUTPUT);
  pinMode(mra, OUTPUT);
  pinMode(mrb, OUTPUT);
  //pulse width modulation pins
  pinMode(ena,OUTPUT);
  pinMode(enb,OUTPUT);
}
void loop() {
  //conditions for movements
  if (digitalRead(3)==LOW && digitalRead(4)==LOW){
    analogWrite(ena,Speed);
    analogWrite(enb,Speed);
    digitalWrite(mla, HIGH);
    digitalWrite(mlb, LOW);
    digitalWrite(mra, HIGH);
    digitalWrite(mrb, LOW);
  } else if (digitalRead(3)==LOW && digitalRead(4)==HIGH){
    analogWrite(ena,190);
    analogWrite(enb,190);
    digitalWrite(mla, LOW);
    digitalWrite(mlb, LOW);
    digitalWrite(mra, HIGH);
    digitalWrite(mrb, LOW);
  } else if (digitalRead(3)==HIGH && digitalRead(4)==LOW){
    analogWrite(ena,190);
    analogWrite(enb,190);
    digitalWrite(mla, HIGH);
    digitalWrite(mlb, LOW);
    digitalWrite(mra, LOW);
    digitalWrite(mrb, LOW);
  } else if (digitalRead(3)==HIGH && digitalRead(4)==HIGH){
    analogWrite(ena,Speed);
    analogWrite(enb,Speed);
    digitalWrite(mla, LOW);
    digitalWrite(mlb, LOW);
    digitalWrite(mra, LOW);
    digitalWrite(mrb, LOW);
    
  }
  
}
